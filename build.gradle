import org.jetbrains.intellij.platform.gradle.TestFrameworkType

plugins {
    id 'org.jetbrains.kotlin.jvm' version "1.9.23"
    id 'org.jetbrains.intellij.platform' version '2.1.0'
    id "org.jetbrains.grammarkit" version "2022.3.2.2"
    id 'org.jetbrains.changelog' version "2.2.1"
    id 'java'
}

group 'glsl.plugin'
version pluginVersion

repositories {
    mavenCentral()
    intellijPlatform {
        defaultRepositories()
    }
}

dependencies {
    intellijPlatform {
        intellijIdeaCommunity '2024.3'
        testFramework TestFrameworkType.Platform.INSTANCE
        instrumentationTools()
    }
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.opentest4j:opentest4j:1.3.0'
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_17
}

runIde {
    maxHeapSize = "6g"
}


generateParser {
    doFirst {
        delete 'src/main/gen/psi'
    }
    sourceFile = file('grammar/GlslGrammar.bnf')
    targetRootOutputDir = file('src/main/gen')
    pathToParser = '_GlslParser.java'
    pathToPsiRoot = 'psi'
}

def generateLexer(String fileName) {
    return generateLexer {
        source = 'grammar/' + fileName
        targetDir = 'src/main/gen/glsl'
        targetOutputDir = file('src/main/gen')
        sourceFile = file('grammar/' + fileName)
    }
}

tasks.register('generateGrammarClean') {
    doFirst {
        delete 'src/main/gen'
    }
    doLast {
        generateParser.exec()
        generateLexer("GlslHighlightLexer.flex").exec()
        generateLexer("GlslLexer.flex").exec()
    }
}

patchPluginXml {
    def descriptionHtml = file('plugin-info/description.html').text
    changeNotes = changelog.get(version.toString()).toHTML()
    pluginDescription = descriptionHtml
    sinceBuild = '223'
}

changelog {
    version = pluginVersion
}

publishPlugin {
    token = System.getenv('PUBLISH_TOKEN')
}

sourceSets {
    main {
        java.srcDirs 'src/main/gen'
    }
}